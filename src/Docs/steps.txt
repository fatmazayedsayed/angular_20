#installing project
download node / tsc/ angular
check current version
node -v
npm -v
tsc -v
--------------------------------------------------------------------------------------------
#create a new project
ng new projectName
test project run by wrting ng s
--------------------------------------------------------------------------------------------
#package.json
consists of many sections
1. dependencies: all dependencies that be used inside the project
2. devDependencies:used for development mode
--------------------------------------------------------------------------------------------
#angular.json
a configuration file for the project
it has the starting point of the app which by default is index.html and 
"browser": "src/main.ts",
app.route:routing for your components(paths)
style.scss->golab css file for the project
--------------------------------------------------------------------------------------------
#components
  -classes that contians business logic
  -all components should be imported into app components to be able to acccesses through the project
  ng g c componentName
  -components by default become stand alone , no need to define it in app component
    imports: [],// all dependencies
    templateUrl: './user.html',//html
    styleUrl: './user.scss'
    selector: 'app-user',
    'app'is a prefix u can change it from angular.json (   "prefix": "app")
  -run stand alone component 
    call it in app.component
    import component in app

--------------------------------------------------------------------------------------------
#Data Binding
  -linking between entities (html/component), allow data updating
  -types of Data Binding:
    -one way data binding
      -interpolation{{}}-> from component to html
      -property binding[]->from component to html
      -event binding()->from FE to component when user make action in FE
    -two way data binding[()]
      data changed bi-directionlay from component and view
--------------------------------------------------------------------------------------------
#Directives
  classes that add additional behavior to elements in app,
  to manage form/list/style 
  -types of Directives:
    1. component:used with a template (ng g c 'name')-> 
      u have to import what u need to be accesed on your component 
      like (ngIf, anothe component)
    2. structural: change appearance or behavior of an elelment,componet or anothe Directive
      like (ngIf, ngFor,ngSwitch)
    3. attribute: change DOM layout by adding and removing DOm elements
      [ngClass],[ngStyle],[ngModel]
install bootstabp (npm i bootstrap)  
call bootstrap files in angular.json
  "styles": [
              "src/styles.scss",
              "node_modules/bootstrap/dist/css/bootstrap.min.css"
            ],
            "scripts": [
                        "node_modules/bootstrap/dist/js/bootstrap.min.js"
            ],
structural:
      ngIf->show/hide elements
          if->conditional rendering/improve performance
      ngFor->loop through a list(requires to import commonModule)
      for-> add track option, to track row changes(not requires to import commonModule)
        has many extra options
          $odd;  $even; $first;  $last;  $index
        use for when u have mandatory tracking function
        empty option to check empty list
      ngSwitch/switch:
        like normal switch case 
 attribute for styling
  ngClass->add/remove class from elements, we can also use [class]
  same [ngStyle]="{add the style inside it}", we can also use [style]
--------------------------------------------------------------------------------------------
#Siganl
a value that notifies consumers when value changes, to read its value by callingits getter function
to allow angular to track
Why signals:
Normally in Angular, we use:
- @Input() + @Output() → to pass data between components
- RxJS Observables → for reactive streams (async operations, HTTP calls, etc.)
-Change detection → Angular runs checks across the component tree when something changes

*A signal is basically a reactive variable:
You create it with signal()
You read its value by calling it like a function
You update it with .set() or .update()
Angular automatically tracks who depends on the signal, and only re-renders those parts of the template when it changes.
This reduces unnecessary change detection and makes code easier to reason about.
it will notify all consumers with its updates

  types of Siganls:
    1. writable:provide API for updating their values 
    2. computed:read only that derive their value from other signals
    writable signals:
    you need to call it like a function

    changeDetection : ChangeDetectionStrategy.OnPush ,used to update the UI , after a certain action
in case of normal variable, we need to use changeDetection then action to update UI,
but for signals we don't need that
effect function will listen to any changes of signal variable

*Linked Signals(computed signals):
used to update values in real time
to automatically update another signal variable once a certain signal variable changed
Keep state declarative instead of imperative
Avoid redundant updates (no .set() duplication)
Automatically stay in sync

you have to set computed() function to define how to update the new variable
--------------------------------------------------------------------------------------------
#routing
it used for navigation
default routing 'main routing of site start up'
redirectTo function->used to redirect to a certain page by default and u can give it a call back function
* waild card->define page not found
-routerLink->by default when click to navigation site will be refreshed, to not that to user SPA 'single page application', user router link
-routerLinkActive: used to set current aactive link
#navigation->move from componet to another

routerLink->navigate by default, can't make any action before navigation
differance between navigateByUrl and navigate
navigateByUrl->will take only the path to new page
navigate->will take path and list of paramters that can be
-------------------------------------------------------------------------------------------#Hooks
  series of methods that angular calls at differnet stages of component life cycle, like intalize and destory

  Creation: The component is instantiated and its dependencies are injected.
Change Detection: Angular checks for changes in the data-bound properties.
Rendering: The component's template is rendered or updated.
Destruction: The component is destroyed and cleaned up.

  1. ngOnChanges()->when an Input property has been changed(many)
  It is called before ngOnInit (if the component has bound inputs) and whenever one or more data-bound input properties change. It is used to respond to changes in input properties.

  2. ngOnInit()->after the componet is initalized(once)
  It is Called once, after the first ngOnChanges. It is used to initialize the component after Angular first displays the data-bound properties.

  3. ngDoCheck()->called every time changes detected run(many)
  It is called during every change detection run, immediately after ngOnChanges and ngOnInit. It is used to detect and act upon changes that Angular can't or won't detect on its own.

  4. ngAfterContentInit()->after the component contents has been initalized(once)
  It is called once after the first ngDoCheck. It is used to perform any additional initialization required for the content.

  5. ngAfterContentChecked()->after the componet content has been ngAfterContentChecked(many)
  It is called after ngAfterContentInit and every subsequent ngDoCheck. It is used to act upon any changes after the content has been checked.

  6. ngAfterViewInit()->after the component view has been initalized(once)
  It is called once after the first ngAfterContentChecked. It is used to perform additional initialization required for the view.

  7. ngAfterViewChecked()->after the componet view has been checked(once)
  It is called after ngAfterViewInit and every subsequent ngAfterContentChecked. It is used to act upon any changes after the view has been checked.

  8. ngOnDestory()->before component is destory(once)
It is called immediately before Angular destroys the component. It is used to clean up any resources, such as subscriptions and event handlers, to avoid memory leaks.

Note:
you have to add interface per each hook u need to call

--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
--------------------------------------------------------------------------------------------
#
